# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p09r__Oe_XA5lq-kxQ-keJjzg_Ypj6OR
"""

!unzip -q Knowledge_Base.zip
!pip install sentence-transformers streamlit -q

import streamlit as st
from sentence_transformers import SentenceTransformer, util
import os
import torch

# Load model
embedder = SentenceTransformer('paraphrase-MiniLM-L6-v2')

# Load knowledge base
def load_knowledge_base(folder_path):
    docs = {}
    for filename in os.listdir(folder_path):
        if filename.endswith(".md"):
            with open(os.path.join(folder_path, filename), "r", encoding="utf-8") as file:
                docs[filename] = file.read()
    return docs

# Embed paragraphs
def embed_paragraphs(paragraphs):
    embeddings = []
    for content in paragraphs.values():
        embeddings.append(embedder.encode(content, convert_to_tensor=True))
    return torch.stack(embeddings)

# Find best match
def find_best_paragraph(user_query, paragraphs, embeddings):
    query_embedding = embedder.encode(user_query, convert_to_tensor=True)
    cos_scores = util.cos_sim(query_embedding, embeddings)[0]
    top_result = cos_scores.argmax().item()
    top_score = cos_scores[top_result].item()

    if top_score < 0.2:
        return None
    else:
        return paragraphs[list(paragraphs.keys())[top_result]]

# Streamlit UI
def main():
    st.title("ðŸ’¬ Fitlytic Bot")
    kb_folder = "Knowledge_Base"
    paragraphs = load_knowledge_base(kb_folder)
    embeddings = embed_paragraphs(paragraphs)

    user_query = st.text_input("Ask me anything:")

    if user_query:
        best_para = find_best_paragraph(user_query, paragraphs, embeddings)
        if best_para:
            st.success(best_para)
        else:
            st.error("Sorry, I couldn't find an answer. Try rephrasing your question.")

if __name__ == "__main__":
    main()